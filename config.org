# #+TITLE: My doom emacs configuration
#+AUTHOR: Hoang Nghiem
#+EMAIL: hoangnghiem1711@gmail.com

* Table of contents :TOC:
- [[#general][General]]
  - [[#personal-information][Personal information]]
  - [[#appearance][Appearance]]
  - [[#treemacs][Treemacs]]
- [[#theme][Theme]]
- [[#utility-functions][Utility functions]]
  - [[#duplicate-line][Duplicate line]]
  - [[#delete-blank-lines-of-current-buffer][Delete blank lines of current buffer]]
  - [[#copy-filename-of-current-buffer][Copy filename of current buffer]]
  - [[#check-rails-project][Check rails project]]
  - [[#insert-number-at-the-beginningend-of-lines][Insert number at the beginning/end of lines]]
- [[#packages][Packages]]
  - [[#doom-built-in-packages][Doom built-in packages]]
  - [[#extra-packages][Extra packages]]
- [[#hydras][Hydras]]
  - [[#string-inflection][string-inflection]]
  - [[#expand-region][expand region]]
  - [[#scrolling][scrolling]]
  - [[#line][line]]
  - [[#centaur-tab][centaur tab]]
  - [[#multiple-cursor][multiple cursor]]
  - [[#web-mode-interaction][web mode interaction]]
  - [[#rectangle-interaction][rectangle interaction]]
- [[#languages][Languages]]
  - [[#emacs-lisp-mode][emacs-lisp-mode]]
  - [[#lsp-mode][lsp-mode]]
  - [[#org-mode][org-mode]]
  - [[#ruby-mode][ruby-mode]]
  - [[#rspec-mode][rspec-mode]]
  - [[#makefile-mode][makefile-mode]]
  - [[#web-mode][web-mode]]
  - [[#js-mode][js-mode]]
- [[#key-bindings][Key bindings]]
  - [[#local-leader][Local leader]]
  - [[#additional-leader-mappings][Additional leader mappings]]
  - [[#general-actions][General actions]]
  - [[#-leader-mappings][; leader mappings]]
  - [[#g-leader-mappings][g leader mappings]]
  - [[#z-leader-mappings][z leader mappings]]
  - [[#c-i-leader-mappings][C-i leader mappings]]
- [[#ruby-on-rails][Ruby on rails]]
- [[#ligatures][Ligatures]]

* General
** Personal information
#+begin_src emacs-lisp
(setq user-full-name "Hoang Nghiem"
      user-mail-address "hoangnghiem1711@gmail.com")
#+end_src

** Appearance
*** Colorscheme & font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Mono" :size 20 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "Fira Mono" :size 20)
      doom-theme 'doom-one
      ;; doom-theme 'modus-vivendi-tinted
      ;; doom-theme 'modus-operandi-tinted
      corfu-auto-prefix 1
      display-line-numbers-type t
      doom-themes-treemacs-theme "doom-colors")

(setq-default pgtk-wait-for-event-timeout 0)
(setq-default line-spacing 0.25)
(setq projectile-indexing-method 'alien)
(setq projectile-generic-command "fd . --type f --type l --hidden --follow --exclude .git --exclude .project")

;; (setq debug-on-error t)
#+end_src

*** Open emacs in fullscreen by default
#+begin_src emacs-lisp
(setq initial-frame-alist '((fullscreen . maximized)))
#+end_src

*** Misc
#+begin_src emacs-lisp
(setq read-process-output-max (* 5 1024 1024) ;; 5mb
      which-key-idle-delay 0.1
      kill-whole-line t
      make-backup-files t
      delete-by-moving-to-trash t
      ;; treemacs default width
      treemacs-width 60
      org-latex-tables-booktabs t
      ;; org
      org-latex-toc-command "\\tableofcontents \\clearpage"
      expand-region-subword-enabled t
      apheleia-log-debug-info t
      langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"
      fancy-splash-image (expand-file-name "Emacs.svg" doom-private-dir)
      doom-scratch-dir doom-private-dir
      doom-scratch-default-file "scratch"
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01
      ispell-program-name "aspell"
      ispell-dictionary "english"
      ;; +popup-defaults (plist-put +popup-defaults :height 0.3)
      ;; company-frontend '(company-pseudo-tooltip-unless-just-one-frontend company-preview-if-just-one-frontend company-echo-metadata-frontend company-preview-frontend)
      +tree-sitter-hl-enabled-modes nil)

(setq yas-snippet-dirs
      (append yas-snippet-dirs
              (list (expand-file-name "snippets" doom-private-dir))))

;; (add-hook! 'solaire-mode-hook
;;   ;(set-face-attribute 'solaire-fringe-face nil :background (face-background 'solaire-hl-line-face))
;;   (set-face-attribute 'fringe nil :background (face-background 'solaire-default-face)))

(add-hook 'ibuffer-mode-hook #'nerd-icons-ibuffer-mode)

;; (set-popup-rules!
;;  '(("^ \\*" :slot -1) ; fallback rule for special buffers
;;    ("^\\*" :select t :size 0.25)
;;    ("^\\*Completions" :slot -1 :ttl 0)
;;    ("^\\*\\(?:scratch\\|Messages\\)" :ttl t :size 0.25)
;;    ("^\\*Help" :slot -1 :size 0.25 :select t)
;;    ("^\\*doom:"
;;     :size 0.35 :select t :modeline t :quit t :ttl t)))
#+end_src

** Treemacs
Allow C-h and C-l to switch buffers
#+begin_src emacs-lisp
(map!
 (:after treemacs-evil
         (:map evil-treemacs-state-map
               "C-h" #'evil-window-left
               "C-l" #'evil-window-right
               "gb" #'treemacs-bookmark)))

(after! treemacs
  (add-hook! 'treemacs-mode-hook (setq window-divider-mode -1
                                       variable-pitch-mode 1
                                       treemacs-follow-mode 1)))
#+end_src

* Theme
#+begin_src emacs-lisp
(blink-cursor-mode 1)  ; Enable cursor blinking
(setq blink-cursor-interval 1.0)  ; Time in seconds between cursor blinks
(setq blink-cursor-delay 0.5)

(use-package! modus-themes
  :config
  (setq modus-themes-common-palette-overrides modus-themes-preset-overrides-faint)
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-mixed-fonts t
        modus-themes-custom-auto-reload t)

  (setq modus-vivendi-tinted-palette-overrides
        '((bg-main "#292D3E")
          ;; (fg-main "#eceff4")
          (fg-main "#DFE5F0")
          ;; nord palette
          ;; (red-faint "#bf616a")
          ;; (blue-faint "#81a1c1")
          ;; (green-faint "#a3be8c")
          ;; (yellow-faint "#ebcb8b")
          ;; (magenta-faint "#b48ead")
          ;; (cyan-faint "#88c0d0")
          ;; (blue "#81a1c1")
          ;; (red "#bf616a")
          ;; (green "#a3be8c")
          ;; (green-faint "#c3e88d")
          ;; (cyan "#88c0d0")
          ;; (yellow "#ebcb8b")
          ;; (yellow-faint "#ebcb8b")
          ;; (pink "#b48ead")
          ;; (comment "#68748D")
          ;; (blue-cooler "#81a1c1")
          )))

;; light theme
;; (custom-set-faces!
;;   '(web-mode-html-attr-name-face :slant italic)
;;   '(web-mode-block-string-face :foreground "#316500")
;;   '(web-mode-html-attr-equal-face :foreground "#76839D")
;;   '(web-mode-keyword-face :foreground "#d08770")
;;   '(web-mode-html-attr-value-face :foreground "#6f5500")
;;   '(font-lock-keyword-face :slant italic)
;;   '(font-lock-string-face :foreground "#316500")
;;   )

;; dark theme
;; (custom-set-faces!
;;   '(web-mode-html-attr-name-face :slant italic)
;;   '(web-mode-block-string-face :foreground "#a3be8c")
;;   '(web-mode-html-attr-equal-face :foreground "#76839D")
;;   '(web-mode-keyword-face :foreground "#d08770")
;;   '(web-mode-html-attr-value-face :foreground "#ebcb8b")
;;   '(font-lock-keyword-face :slant italic)
;;   '(font-lock-string-face :foreground "#a3be8c ")
;;   '(font-lock-type-face :foreground "#ebcb8b")
;;   )

;; doom one
(custom-set-faces!
  ;; '(web-mode-html-attr-name-face :slant italic)
  ;; '(web-mode-block-string-face :foreground "#a3be8c")
  ;; '(web-mode-html-attr-equal-face :foreground "#76839D")
  ;; '(web-mode-keyword-face :foreground "#d08770")
  ;; '(web-mode-html-attr-value-face :foreground "#ebcb8b")
  '(font-lock-keyword-face :slant italic :family "Cascadia Code")
  '(font-lock-comment-face :slant italic :family "Cascadia Code")
  ;; '(font-lock-string-face :foreground "#a3be8c ")
  ;; '(font-lock-type-face :foreground "#ebcb8b")
  )

#+end_src

* Utility functions
** Duplicate line
#+begin_src emacs-lisp
(defun duplicate-line (arg)
  "Duplicate current line, leaving point in lower line."
  (interactive "*p")

  ;; save the point for undo
  (setq buffer-undo-list (cons (point) buffer-undo-list))

  ;; local variables for start and end of line
  (let ((bol (save-excursion (beginning-of-line) (point)))
        eol)
    (save-excursion

      ;; don't use forward-line for this, because you would have
      ;; to check whether you are at the end of the buffer
      (end-of-line)
      (setq eol (point))

      ;; store the line and disable the recording of undo information
      (let ((line (buffer-substring bol eol))
            (buffer-undo-list t)
            (count arg))
        ;; insert the line arg times
        (while (> count 0)
          (newline)         ;; because there is no newline in 'line'
          (insert line)
          (setq count (1- count)))
        )

      ;; create the undo information
      (setq buffer-undo-list (cons (cons eol (point)) buffer-undo-list)))
    ) ; end-of-let

  ;; put the point in the lowest line and return
  (next-line arg))
#+end_src

** Delete blank lines of current buffer
#+begin_src emacs-lisp
(defun flush-blank-lines ()
  "Removes all blank lines from buffer or region"
  (interactive)
  (save-excursion
    (let (min max)
      (if (equal (region-active-p) nil)
          (mark-whole-buffer))
      (setq min (region-beginning) max (region-end))
      (flush-lines "^ *$" min max t))))
#+end_src
** Copy filename of current buffer
#+begin_src emacs-lisp
(defun clipboard/set (astring)
  "Copy a string to clipboard"
  (with-temp-buffer
    (insert astring)
    (clipboard-kill-region (point-min) (point-max))))

(defun buffer/copy-file-name ()
  (interactive)
  (clipboard/set (file-name-base buffer-file-name)))
#+end_src

** Check rails project
#+begin_src emacs-lisp
(defun is-in-rails-project ()
  "Check if the current buffer is part of a Rails project."
  (and (buffer-file-name) ; Ensures it's a file buffer
       (locate-dominating-file (buffer-file-name) "config/application.rb")))
#+end_src

** Insert number at the beginning/end of lines
#+begin_src emacs-lisp
(defun insert-number-at-beginning-region (start end start-number)
  "Number lines in the region from START to END, beginning with START-NUMBER."
  (interactive "r\nnStart numbering at: ")
  (let* ((lines (count-lines start end))
         (from start-number)
         (to (+ lines (1- from)))
         (numbers (number-sequence from to))
         (width (max (length (int-to-string to))
                     (length (int-to-string from)))))
    (if (= start (point))
        (setq numbers (reverse numbers)))
    (goto-char start)
    (dolist (n numbers)
      (beginning-of-line)
      (save-match-data
        (if (looking-at " *-?[0-9]+\\. ")
            (replace-match "")))
      (insert (format (concat "%" (int-to-string width) "d ") n))
      (forward-line 1))))

(defun insert-number-at-end-region (start end start-number)
  "Number lines in the region from START to END, appending starting with START-NUMBER."
  (interactive "r\nnStart numbering at: ")
  (let* ((lines (count-lines start end))
         (from start-number)
         (to (+ lines (1- from)))
         (numbers (number-sequence from to))
         (width (max (length (int-to-string to))
                     (length (int-to-string from)))))
    (if (= start (point))
        (setq numbers (reverse numbers)))
    (goto-char start)
    (dolist (n numbers)
      (end-of-line)  ; Move to the end of the line
      (insert (format " %d" n))  ; Insert the number at the end of the line
      (forward-line 1))))
#+end_src
* Packages
** Doom built-in packages
*** evil-snipe
#+begin_src emacs-lisp
(after! evil-snipe
  :config
  (setq evil-snipe-scope 'whole-buffer))
#+end_src
*** evil-surround
#+begin_src emacs-lisp
(with-eval-after-load 'evil-surround
  (push '(?b . ("{" . "}")) evil-surround-pairs-alist))
#+end_src

*** rotate-text
#+begin_src emacs-lisp
;; some rotation text for ruby
(after! rotate-text
  (add-to-list 'rotate-text-words '("valid" "invalid"))
  (add-to-list 'rotate-text-words '("context" "describe"))
  (add-to-list 'rotate-text-symbols '("be_valid" "be_invalid"))
  (add-to-list 'rotate-text-symbols '("valid?" "invalid?"))
  (add-to-list 'rotate-text-symbols '("present?" "blank?" "nil?"))
  (add-to-list 'rotate-text-symbols '("belongs_to" "has_many" "has_one"))
  (add-to-list 'rotate-text-symbols '("if" "unless"))
  (add-to-list 'rotate-text-symbols '("greater_than" "greater_than_or_equal_to" "equal_to" "less_than" "less_than_or_equal_to" "other_than" "odd" "even"))
  (add-to-list 'rotate-text-symbols '("to" "not_to")))
#+end_src

*** flycheck
#+begin_src emacs-lisp
;; disable flycheck on-save to avoid a race condition between flycheck saving a tmp-file and apheleia formatting it
(after! flycheck
  (setq flycheck-check-syntax-automatically '(mode-enabled idle-buffer-switch)))
#+end_src

*** cape
#+begin_src emacs-lisp
(use-package! company-web)

(after! cape
  (setq-local completion-at-point-functions
              (mapcar #'cape-company-to-capf
                      (list #'company-robe #'company-web-html))))
;; (after! cape
;;   (setq cape-dict-file "/usr/share/dict/words"))
#+end_src

*** highlight-indent-guides
#+begin_src emacs-lisp
;; (use-package! highlight-indent-guides
;;   :config
;;   (setq highlight-indent-guides-method 'character)
;;   (setq highlight-indent-guides-responsive 'top))
  ;; (setq highlight-indent-guides-auto-character-face-perc 20)
  ;; (setq highlight-indent-guides-auto-even-face-perc 8)
  ;; (setq highlight-indent-guides-auto-character-face-perc 100))
#+end_src

*** evil
#+begin_src emacs-lisp
(after! evil
  (defalias #'forward-evil-word #'forward-evil-symbol)
  ;; make evil-search-word look for symbol rather than word boundaries
  (setq-default evil-symbol-word-search t))
#+end_src

** Extra packages
*** evil-matchit (like % in vim)
#+begin_src emacs-lisp
(use-package! evil-matchit
  :config
  (global-evil-matchit-mode 1)
  (add-hook 'evilmi-jump-hook
          (lambda (before-jump-p)
            (global-tree-sitter-mode (not before-jump-p)))))
#+end_src

*** visual-regexp-steroids
#+begin_src emacs-lisp
(use-package! visual-regexp-steroids)
#+end_src

*** codeium (code AI completion)
#+begin_src emacs-lisp
;; we recommend using use-package to organize your init.el
;; (use-package codeium
;;     ;; if you use straight
;;     ;; :straight '(:type git :host github :repo "Exafunction/codeium.el")
;;     ;; otherwise, make sure that the codeium.el file is on load-path

;;     :init
;;     ;; use globally
;;     (add-to-list 'completion-at-point-functions #'codeium-completion-at-point)
;;     ;; or on a hook
;;     ;; (add-hook 'python-mode-hook
;;     ;;     (lambda ()
;;     ;;         (setq-local completion-at-point-functions '(codeium-completion-at-point))))

;;     ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):
;;     ;; (add-hook 'python-mode-hook
;;     ;;     (lambda ()
;;     ;;         (setq-local completion-at-point-functions
;;     ;;             (list (cape-super-capf #'codeium-completion-at-point #'lsp-completion-at-point)))))
;;     ;; an async company-backend is coming soon!

;;     ;; codeium-completion-at-point is autoloaded, but you can
;;     ;; optionally set a timer, which might speed up things as the
;;     ;; codeium local language server takes ~0.2s to start up
;;     ;; (add-hook 'emacs-startup-hook
;;     ;;  (lambda () (run-with-timer 0.1 nil #'codeium-init)))

;;     ;; :defer t ;; lazy loading, if you want
;;     :config
;;     (setq use-dialog-box nil) ;; do not use popup boxes

;;     ;; if you don't want to use customize to save the api-key
;;     ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")

;;     ;; get codeium status in the modeline
;;     (setq codeium-mode-line-enable
;;         (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
;;     (add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
;;     ;; alternatively for a more extensive mode-line
;;     ;; (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

;;     ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
;;     (setq codeium-api-enabled
;;         (lambda (api)
;;             (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
;;     ;; you can also set a config for a single buffer like this:
;;     ;; (add-hook 'python-mode-hook
;;     ;;     (lambda ()
;;     ;;         (setq-local codeium/editor_options/tab_size 4)))

;;     ;; You can overwrite all the codeium configs!
;;     ;; for example, we recommend limiting the string sent to codeium for better performance
;;     (defun my-codeium/document/text ()
;;         (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
;;     ;; if you change the text, you should also change the cursor_offset
;;     ;; warning: this is measured by UTF-8 encoded bytes
;;     (defun my-codeium/document/cursor_offset ()
;;         (codeium-utf8-byte-length
;;             (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
;;     (setq codeium/document/text 'my-codeium/document/text)
;;     (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset))

#+end_src
*** move-text
#+begin_src emacs-lisp
(use-package! move-text)
#+end_src

*** auto-dim-other-buffers
#+begin_src emacs-lisp
;; (add-hook 'after-init-hook (lambda ()
;;                              (when (fboundp 'auto-dim-other-buffers-mode)
;;                                (auto-dim-other-buffers-mode t))))
#+end_src
*** expreg (language specific expand region)
#+begin_src emacs-lisp
(use-package! expreg)
#+end_src
*** wakatime
#+begin_src emacs-lisp
(use-package! wakatime-mode
  :config
  (setq wakatime-api-key "dc57193b-a9db-484b-b2b8-732d130a346f"
        wakatime-cli-path "~/.wakatime/wakatime-cli")
  (global-wakatime-mode))
#+end_src
#+end_src
*** zeal-at-point
#+begin_src emacs-lisp
;; (use-package zeal-at-point
;;   :ensure t
;;   :bind (("C-c d" . zeal-at-point))
;;   :config
;;   (add-to-list 'zeal-at-point-mode-alist '(ruby-mode . ("ruby" "rails"))))
#+end_src
* Hydras
** string-inflection
#+begin_src emacs-lisp
(defun my-string-inflection-cycle-auto ()
  "switching by major-mode"
  (interactive)
  (cond
   ;; for emacs-lisp-mode
   ((eq major-mode 'emacs-lisp-mode)
    (string-inflection-all-cycle))
   ;; for python
   ((eq major-mode 'python-mode)
    (string-inflection-python-style-cycle))
   ;; for java
   ((eq major-mode 'java-mode)
    (string-inflection-java-style-cycle))
   ;; for ruby
   ((eq major-mode 'ruby-mode)
    (string-inflection-ruby-style-cycle))
   (t
    ;; default
    (string-inflection-all-cycle))))

(pretty-hydra-define hydra-string-inflection (:color red)
  ("String inflection"
  (("i" my-string-inflection-cycle-auto "cycle")
   ("l" string-inflection-lower-camelcase "lower camel")
   ("c" string-inflection-camelcase "camel")
   ("k" string-inflection-kebab-case "kebab")
   ("u" string-inflection-underscore "underscore")
   ("U" string-inflection-upcase "upcase"))))
#+end_src

** expand region
#+begin_src emacs-lisp
(pretty-hydra-define hydra-expand
  (:color red :body-pre (er/expand-region 1))
  ("Expand region"
   (("c" er/contract-region "Contract")
    ("e" er/expand-region "Expand")))
  )

(pretty-hydra-define hydra-regex-expand (:color red)
  ("Regex expand region"
   (("c" expreg-contract "Contract")
    ("e" expreg-expand "Expand")
    ("h" tree-sitter-mark-bigger-node "Bigger note")
    ))
  )
#+end_src

** scrolling
#+begin_src emacs-lisp
(pretty-hydra-define hydra-scroll (:color red)
  ("Scrolling"
   (("k" evil-scroll-line-up "scroll up")
    ("j" evil-scroll-line-down "scroll down")
    ("t" evil-scroll-line-to-top "to top")
    ("b" evil-scroll-line-to-bottom "to bottom")
    ("c" evil-scroll-line-to-center "to center"))))

#+end_src

** line
#+begin_src emacs-lisp
(pretty-hydra-define hydra-move-line (:color red :hint nil)
  ("Line"
   (("k" move-text-up "up")
    ("j" move-text-down "down")
    ("d" flush-blank-lines "flush-blank-lines"))))
#+end_src

** centaur tab
#+begin_src emacs-lisp
(pretty-hydra-define hydra-centaur (:color red :hint nil)
  ("Buffer"
   (("l" centaur-tabs-forward "next")
    ("h" centaur-tabs-backward "previous")
    ("d" kill-this-buffer "kill")
    ("k" doom/kill-other-buffers "kill other buffers"))))
#+end_src

** multiple cursor
#+begin_src emacs-lisp
(pretty-hydra-define hydra-multiple-cursors (:color pink :hint nil :title "MULTIPLE CURSOR")
  ("Match"
   (("Z" #'evil-mc-make-all-cursors "match all")
    ("m" #'evil-mc-make-and-goto-next-match "make & next")
    ("M" #'evil-mc-make-and-goto-prev-match "make & prev")
    ("n" #'evil-mc-skip-and-goto-next-match "skip & next")
    ("N" #'evil-mc-skip-and-goto-prev-match "skip & prev"))

   "Line-wise"
   (("J" #'evil-mc-make-cursor-move-next-line "make & go down")
    ("K" #'evil-mc-make-cursor-move-prev-line "make & go up"))

   "Manual"
   (("z" #'+multiple-cursors/evil-mc-toggle-cursor-here "toggle here")
    ("p" #'+multiple-cursors/evil-mc-toggle-cursors "pause/resume"))

   ""
   (("q" nil "quit")
    ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))))
#+end_src

** web mode interaction
#+begin_src emacs-lisp
(pretty-hydra-define hydra-web-block-interaction (:color red)
  ("Block"
   (("s" #'web-mode-navigate "match")
    ("j" #'web-mode-block-next "next")
    ("k" #'web-mode-block-previous "previous")
    ("t" #'web-mode-fold-or-unfold "fold or unfold")
    ("v" #'my/web-mode-select-next-block "select" :color blue))))

(pretty-hydra-define hydra-web-attribute-interaction (:color red)
  ("Attribute"
   (("j" #'web-mode-attribute-next "next")
    ("k" #'web-mode-attribute-previous "previous")
    ("d" #'web-mode-attribute-kill "delete")
    ("v" #'web-mode-attribute-select "delete" :color blue))))

(pretty-hydra-define hydra-web-mode (:color blue)
  ("Web mode interaction"
   (("b" #'hydra-web-block-interaction/body "block")
    ("a" #'hydra-web-attribute-interaction/body "attribute"))))
#+end_src

** rectangle interaction
#+begin_src emacs-lisp
(defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                     :color pink
                                     :hint nil
                                     :post (deactivate-mark))
  "
  ^_k_^       _w_ copy      _o_pen       _N_umber-lines            |\\     -,,,--,,_
_h_   _l_     _y_ank        _t_ype       _e_xchange-point          /,`.-'`'   ..  \-;;,_
  ^_j_^       _d_ kill      _c_lear      _r_eset-region-mark      |,4-  ) )_   .;.(  `'-'
^^^^          _u_ndo        _g_ quit     ^ ^                     '---''(./..)-'(_\_)
"
  ("k" rectangle-previous-line)
  ("j" rectangle-next-line)
  ("h" rectangle-backward-char)
  ("l" rectangle-forward-char)
  ("d" kill-rectangle)                    ;; C-x r k
  ("y" yank-rectangle)                    ;; C-x r y
  ("w" copy-rectangle-as-kill)            ;; C-x r M-w
  ("o" open-rectangle)                    ;; C-x r o
  ("t" string-rectangle)                  ;; C-x r t
  ("c" clear-rectangle)                   ;; C-x r c
  ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
  ("N" rectangle-number-lines)            ;; C-x r N
  ("r" (if (region-active-p)
           (deactivate-mark)
         (rectangle-mark-mode 1)))
  ("u" undo nil)
  ("g" nil))      ;; ok
#+end_src
* Languages

** emacs-lisp-mode
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
#+end_src

** lsp-mode
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-idle-delay 0.1
        lsp-use-plists "true"
        lsp-solargraph-use-bundler t
        lsp-solargraph-multi-root nil
        lsp-enable-symbol-highlighting nil
        lsp-ui-doc-enable nil
        ;; lsp-log-io t
        lsp-completion-enable t
        ;; lsp-completion-provider :capf
        ;; lsp-enable-file-watchers nil
        lsp-file-watch-ignored-directories
        '("[/\\\\]\\.git\\'"
          "[/\\\\]node_modules\\'"
          "[/\\\\]\\.hg\\'"
          "[/\\\\]\\.ruby-lsp\\'"
          "[/\\\\]\\.bzr\\'"
          "[/\\\\]_build\\'"
          "[/\\\\]build\\'"
          "[/\\\\]storage\\'"
          "[/\\\\]deployment\\'"
          "[/\\\\]log\\'"
          "[/\\\\]tmp\\'"
          "[/\\\\]db\\'"
          "[/\\\\]dist\\'"
          "[/\\\\]vendor\\'"
          "[/\\\\]\\.next\\'"
          "[/\\\\]\\.cache\\'"
          "[/\\\\]\\.elixir_ls\\'"))

  ;; (add-to-list 'lsp-language-id-configuration '(web-mode . "tailwindcss"))
  (add-to-list 'lsp-language-id-configuration '(web-mode . "stimulus"))
  ;; (add-to-list 'lsp-language-id-configuration '(css-mode . "tailwindcss"))
  ;; (add-to-list 'lsp-language-id-configuration '(js2-mode . "tailwindcss"))

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("ruby-lsp"))
                    :priority 2
                    :major-modes '(ruby-mode)
                    :server-id 'ruby-lsp))

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("solargraph" "stdio"))
                    :priority 1
                    :major-modes '(ruby-mode)
                    :server-id 'solargraph)))

(use-package! lsp-tailwindcss)

;; (use-package! lsp-tailwindcss
;;   :init (setq lsp-tailwindcss-add-on-mode t)
;;   :after (lsp-mode))

;; (use-package! lsp-tailwindcss
;;       :init
;;       (setq lsp-tailwindcss-add-on-mode t
;;             lsp-tailwindcss-server-command "tailwindcss-language-server"
;;             lsp-tailwindcss-emmet-completions nil)
;;       :config
;;       (dolist (tw-major-mode
;;                '(css-mode
;;                  css-ts-mode
;;                  typescript-mode
;;                  typescript-ts-mode
;;                  tsx-ts-mode
;;                  web-mode
;;                  ruby-mode
;;                  js2-mode
;;                  js-ts-mode
;;                  clojure-mode))
;;         (add-to-list 'lsp-tailwindcss-major-modes tw-major-mode)))

(add-hook! 'before-save-hook 'lsp-tailwindcss-rustywind-before-save)
;; (after! lsp-ui
;;   (setq lsp-ui-doc-enable t))


;; (add-hook 'js2-mode-hook #'lsp)
;; (add-hook 'css-mode-hook #'lsp)
;; (add-hook 'web-mode-hook #'lsp)

;; (add-hook 'web-mode-hook #'lsp-completion-mode)
;; (add-hook 'css-mode-hook #'lsp-completion-mode)
;; (add-hook 'html-mode-hook #'lsp-completion-mode)

#+end_src

** org-mode
#+begin_src emacs-lisp
;;(after! ox-html (require 'ox-tailwind))

(defun my/enable-aggressive-indent ()
  (aggressive-indent-mode 1))

(add-hook 'org-src-mode-hook #'my/enable-aggressive-indent)

;; (use-package! org-appear
;;   :after org
;;   :hook (org-mode . org-appear-mode)
;;   :config (setq
;;            org-appear-autolinks t
;;            org-appear-autoentities t
;;            org-appear-autosubmarkers t ))
#+end_src

** ruby-mode
#+begin_src emacs-lisp
(add-hook! 'ruby-mode-hook #'rbenv-use-corresponding)
(add-hook! 'ruby-mode-hook #'rainbow-delimiters-mode)
;; (add-hook! 'ruby-mode-hook #'subword-mode)
;; (add-hook 'ruby-mode-hook
;;           (lambda ()
;;             (modify-syntax-entry ?_ "w" ruby-mode-syntax-table)))

(setq-hook! 'ruby-mode-hook +format-with-lsp nil)

;; ruby formatter
(set-formatter! 'rubocop '("rubocop" "-A" "--format" "emacs" "--fail-level" "error" "--stderr" "--stdin" filepath) :modes '(ruby-mode))

;; (set-formatter! 'erbformatter '("erb-format" "--stdin" "--print-width" "200") :modes '(web-mode))
;; (set-formatter! 'htmlbeautifier' ("htmlbeautifier") :modes '(web-mode))

;; erb formatter
(set-formatter! 'htmlbeautifier' ("htmlbeautifier" "--keep-blank-lines" "1") :modes '(web-mode))

(set-lookup-handlers! 'ruby-mode
  :definition #'lsp-find-definition
  :references #'lsp-find-references
  :documentation #'lsp-find-declaration)
#+end_src

#+RESULTS:

** rspec-mode
#+begin_src emacs-lisp
(setq rspec-use-spring-when-possible t)

(after! rspec-mode
  (map! :map rspec-mode-map
        :localleader
        "ty" #'rspec-yank-last-command
        "tg" #'rspec-find-spec-or-target-other-window))

(after! ruby-mode
  (map! :map ruby-mode-map
        :localleader
        "tg" #'rspec-find-spec-or-target-other-window))
#+end_src

** makefile-mode
#+begin_src emacs-lisp
(add-hook 'makefile-mode-hook
          (lambda()
            (setq indent-tabs-mode t)))
#+end_src

** web-mode
#+begin_src emacs-lisp
(defun my/web-mode-select-next-block ()
  "Navigate to and select the next code block in web-mode."
  (interactive)
  ;; (set-mark-command nil)
  ;; (web-mode-navigate)
  ;; (activate-mark)

  (push-mark (point) nil t)  ; Push the current position to the mark ring
  (beginning-of-line)        ; Move cursor to the beginning of the line
  (set-mark (point))         ; Set mark at the beginning of the line
  (web-mode-navigate)      ; Navigate to the next block in web-mode
  (end-of-line)              ; Move cursor to the end of the destination line
  (activate-mark)           ; Activate the selection
  )


(after! web-mode
  (setq web-mode-enable-engine-detection t)

  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mjml\\'" . web-mode))
  (add-to-list 'web-mode-engines-alist '("erb" . "\\.erb\\'"))
  (add-to-list 'web-mode-engines-alist '("erb" . "\\.mjml\\'"))

  (add-hook 'web-mode-hook #'hl-todo-mode)

  (map! :map web-mode-map
        :n "#" #'web-mode-navigate
        :n "C-#" #'my/web-mode-select-next-block
        :n ";j" #'hydra-web-block-interaction/body)
  )

(setq web-mode-enable-current-element-highlight t
      web-mode-enable-auto-quoting t
      web-mode-enable-comment-interpolation t
      web-mode-enable-current-column-highlight t)

#+end_src
** js-mode
#+begin_src emacs-lisp
(use-package! js2-mode
  :mode "\\.js\\'")
#+end_src

* Key bindings
** Local leader
#+begin_src emacs-lisp
(setq doom-localleader-key ",")
#+end_src

** Additional leader mappings
#+begin_src emacs-lisp
(map! :leader
      :desc "Copy file name" "fn" 'buffer/copy-file-name
      :desc "Dired" "d" 'dired
      :desc "Dired jumb" "fj" 'dired-jump
      :desc "Fullscreen" "Io" '+zen/toggle-fullscreen)
#+end_src

** General actions
#+begin_src emacs-lisp
(map! "s-<SPC>" #'set-mark-command)

;; normal mode
(map! :n "C-k" #'kill-whole-line)
(map! :n "C-j" 'duplicate-line)
(map! :n "C-s" #'save-buffer)

(map! :n "M-j" #'move-text-down)
(map! :n "M-k" #'move-text-up)

;; insert mode
(map! :i "s-/" 'hippie-expand)
(map! :i "C-/" 'cape-dabbrev)

;; visual mode
(map! :v "C-c i" 'edit-indirect-region)
(map! :nv "C-e" 'hydra-expand/body)
;; (map! :nv "C-e" 'expreg-expand)
;; (map! :nv "C-S-e" 'expreg-contract)
;; any mode

#+end_src

** ; leader mappings
#+begin_src emacs-lisp
(map! :n ";a" 'treemacs-select-window)
(map! :n ";w" '+hydra/window-nav/body)
;; (map! :n ";h" 'hydra-centaur/body)
(map! :n ";e" 'hydra-regex-expand/body)
(map! :n ";u" 'hydra-scroll/body)
(map! :nv ";c" 'hydra-move-line/body)
(map! :n ";i" 'hydra-string-inflection/body)
(map! :n ";d" 'hydra-multiple-cursors/body)
;; (map! :n ";f" 'avy-goto-line-below)
(map! :n ";b" 'hydra-centaur/body)
(map! :n ";." 'projectile-find-dir-other-window)
;; (map! :n ";s" 'save-buffer)
;; (map! :nv ";t" 'hydra-textobj/body)
#+end_src

** g leader mappings
#+begin_src emacs-lisp
;; (map! :n "gl" 'centaur-tabs-forward) ;; next tab
(map! :n "gk" 'avy-goto-line-above) ;; next tab
(map! :n "gj" 'avy-goto-line-below) ;; next tab
(map! :n "gl" 'centaur-tabs-forward) ;; next tab
(map! :n "gh" 'centaur-tabs-backward) ;; previous tab
(map! :n "gw" 'ace-window) ;; select window
(map! :n "gs" 'save-buffer)
#+end_src

** z leader mappings
#+begin_src emacs-lisp
(map! :n "zp" 'show-folded-region)
#+end_src

** C-i leader mappings
#+begin_src emacs-lisp
(map! :i "C-i s" #'yasnippet-capf)
(map! :i "C-i i" #'completion-at-point)
(map! :i "C-i d" #'cape-dabbrev)
(map! :i "C-i w" #'cape-dict)
(map! :i "C-i y" #'cape-symbol)
(map! :i "C-i f" #'cape-file)
(map! :i "C-i k" #'cape-keyword)
(map! :i "C-i l" #'cape-line)
(map! :i "C-i t" #'cape-tex)
(map! :i "C-i &" #'cape-sgml)
(map! :i "C-i r" #'cape-rfc1345)
(map! :i "C-i h" #'cape-history)
(map! :i "C-i e" #'emmet-expand-line)
#+end_src

* Ruby on rails
#+begin_src emacs-lisp
(defun load-libraries ()
  (load (expand-file-name "libraries/http.el" doom-private-dir))
  (map! :leader :desc "Rails" "r" #'projectile-rails-command-map)
  (require 'projectile-rails))

(add-hook! 'doom-first-buffer-hook 'load-libraries)

(after! web-mode
  (set-lookup-handlers! 'web-mode
    :definition '(projectile-rails-goto-file-at-point rails-routes-jump)))

(after! ruby-mode
  ;; SPC m C to copy class name, super useful to test things on console.
  (defun endless/-ruby-symbol-at-point ()
    (let ((l (point)))
      (save-excursion
        (forward-sexp 1)
        (buffer-substring l (point)))))

  (defun endless/ruby-copy-class-name ()
    (interactive)
    (save-excursion
      (let ((name nil)
            (case-fold-search nil))
        (skip-chars-backward (rx (syntax symbol)))
        (when (looking-at-p "\\_<[A-Z]")
          (setq name (endless/-ruby-symbol-at-point)))
        (while (ignore-errors (backward-up-list) t)
          (when (looking-at-p "class\\|module")
            (save-excursion
              (forward-word 1)
              (skip-chars-forward "\r\n[:blank:]")
              (setq name (if name
                             (concat (endless/-ruby-symbol-at-point) "::" name)
                           (endless/-ruby-symbol-at-point))))))
        (kill-new name)
        (message "Copied %s" name))))

  ;; binding it to SPC m c
  (map! :map ruby-mode-map :desc "Copy Class Name" :localleader "c" #'endless/ruby-copy-class-name))

;; Rails Routes Plugin
(after! web-mode
  (define-key web-mode-map (kbd "C-c o") #'rails-routes-insert)
  (define-key web-mode-map (kbd "C-c C-o") #'rails-routes-insert-no-cache))

(after! ruby-mode
  (map! :mode ruby-mode "C-c o" #'rails-routes-insert)
  (map! :mode ruby-mode "C-c C-o" #'rails-routes-insert-no-cache))

(after! evil
  (define-key evil-normal-state-map (kbd "g a") #'rails-routes-jump)
  (define-key evil-visual-state-map (kbd "g a") #'rails-routes-jump))

;; Ruby Json to hash
(after! ruby-mode
  (map! :mode ruby-mode :localleader "J" 'ruby-json-to-hash-parse-json) ;; Parse the json, SPC m J
  (map! :mode ruby-mode :localleader "j" 'ruby-json-to-hash-toggle-let)) ;; Create a let or send the let back to parent. SPC m j

;; Ruby Insert I18n
(after! ruby-mode
  (map! :map ruby-mode-map "C-c i" 'rails-i18n-insert-with-cache) ;; Search with cache on ruby mode
  (map! :map ruby-mode-map "C-c C-i" 'rails-i18n-insert-no-cache) ;; Search refresh cache on ruby modee
  (map! :map web-mode-map "C-c i" 'rails-i18n-insert-with-cache) ;; Search with cache on web-mode
  (map! :map web-mode-map "C-c C-i" 'rails-i18n-insert-no-cache)) ;; Search refresh cache web-mode

;; HTTP Plugin
(after! ruby-mode
  (define-key ruby-mode-map (kbd "C-c s") #'rails-http-statuses-insert-symbol)
  (define-key ruby-mode-map (kbd "C-c S") #'rails-http-statuses-insert-code))
;; Split Giant String
(defvar split-ruby-giant-string-default 125)

(after! ruby-mode
  (defun otavio/split-ruby-giant-string (&optional line-split-real)
    (interactive)
    (if (not line-split-real)
        (setq line-split-real (read-number "split in column:" split-ruby-giant-string-default)))
    (setq line-split (- line-split-real 3))
    (move-to-column line-split)
    (setq char-at-point-is-closing (eq ?\" (char-after)))
    (if (not char-at-point-is-closing)
        (if (eq (current-column) line-split)
            (progn
              ;; Start refactoring
              (if (< (+ (current-indentation) 5 (length (word-at-point))) line-split)
                  (backward-word))
              (insert "\"\"")
              (backward-char)
              (newline)
              (forward-line -1)
              (end-of-line)
              (insert " \\")
              (forward-line 1)
              (indent-according-to-mode)
              (end-of-line)
              (if (> (current-column) line-split-real)
                  (otavio/split-ruby-giant-string line-split-real)
                )
              )
          )))

  (map! :map ruby-mode-map :localleader :desc "Split giant string" "S" #'otavio/split-ruby-giant-string))

(after! projectile-rails
  (defun projectile-rails-find-view-component ()
    "Find a view component."
    (interactive)
    (projectile-rails-find-resource
     "component: "
     '(("app/components/" "\\(.+\\)"))
     "app/components/${filename}.rb"))

  (defun projectile-rails-find-service ()
    "Find a service object."
    (interactive)
    (projectile-rails-find-resource
     "service: "
     '(("app/services/" "\\(.+\\)\\.rb$"))
     "app/services/${filename}.rb"))

  (defun projectile-rails-find-stimulus ()
    "Find a stimulus controller"
    (interactive)
    (projectile-rails-find-resource
     "stimulus: "
     '(("app/vite/controllers/" "\\(.+\\)_controller\\.js$"))
     "app/vite/controllers/${filename}_controller.js"))

  (defun projectile-rails-find-preview ()
    "Find a policy object."
    (interactive)
    (projectile-rails-find-resource
     "preview: "
     '(("app/previews/" "\\(.+\\)"))
     "app/previews/${filename}.rb"))

  (defun projectile-rails-find-form ()
    "Find a form object."
    (interactive)
    (projectile-rails-find-resource
     "form:"
     '(("app/forms/" "\\(.+\\)"))
     "app/forms/${filename}_form.rb"))

  (map! :leader "rp" #'projectile-rails-find-view-component)
  (map! :leader "rs" #'projectile-rails-find-service)
  (map! :leader "ro" #'projectile-rails-find-preview)
  (map! :leader "rd" #'projectile-rails-find-spec)
  (map! :leader "rq" #'projectile-rails-find-stimulus)
  (map! :leader "rf" #'projectile-rails-find-form)
  )

#+end_src

* Ligatures
#+begin_src emacs-lisp
;; Gathered from https://www.jetbrains.com/lp/mono/#ligatures
;; The cheatsheat shows "\/" and "\" which I couldn't get working
(let ((alist '(;;  -> -- --> ->> -< -<< --- -~ -|
               (?- . ".\\(?:--\\|[->]>?\\|<<?\\|[~|]\\)")

               ;; // /* /// /= /== />
               ;; /** is not supported - see https://github.com/JetBrains/JetBrainsMono/issues/202
               ;; /* cannot be conditioned on patterns followed by a whitespace,
               ;; because that would require support for lookaheads in regex.
               ;; We cannot just match on /*\s, because the whitespace would be considered
               ;; as part of the match, but the font only specifies the ligature for /* with
               ;; no trailing characters
               ;;
               (?/ . ".\\(?://?\\|==?\\|\\*\\*?\\|[>]\\)")

               ;; */ *** *>
               ;; Prevent grouping of **/ as *(*/) by actively looking for **/
               ;; which consumes the triple but the font does not define a substitution,so it's rendered normally
               (?* . ".\\(?:\\*/\\|\\*\\*\\|[>/]\\)")

               ;; <!-- <<- <- <=> <= <| <|| <||| <|> <: <> <-< <<< <=< <<= <== <==>
               ;; <~> << <-| <=| <~~ <~ <$> <$ <+> <+ <*> <* </ </> <->
               (?< . ".\\(?:==>\\|!--\\|~~\\|-[|<]\\||>\\||\\{1,3\\}\\|<[=<-]?\\|=[><|=]?\\|[*+$~/-]>?\\|[:>]\\)")

               ;; := ::= :?> :? :: ::: :< :>
               (?: . ".\\(?:\\?>\\|:?=\\|::?\\|[>?<]\\)")

               ;; == =:= === => =!= =/= ==> =>>
               (?= . ".\\(?:[=>]?>\\|[:=!/]?=\\)")

               ;;  != !== !!
               (?! . ".\\(?:==?\\|!\\)")

               ;; >= >> >] >: >- >>> >>= >>- >=>
               (?> . ".\\(?:=>\\|>[=>-]\\|[]=:>-]\\)")

               ;; && &&&
               (?& . ".&&?")

               ;; || |> ||> |||> |] |} |-> |=> |- ||- |= ||=
               (?| . ".\\(?:||?>\\||[=-]\\|[=-]>\\|[]>}|=-]\\)")

               ;; ... .. .? .= .- ..<
               (?. . ".\\(?:\\.[.<]?\\|[.?=-]\\)")

               ;; ++ +++ +>
               (?+ . ".\\(?:\\+\\+?\\|>\\)")

               ;; [| [< [||]
               (?\[ . ".\\(?:|\\(?:|]\\)?\\|<\\)")

               ;; {|
               (?{ . ".|")

               ;; ?: ?. ?? ?=
               (?? . ".[:.?=]")

               ;; ## ### #### #{ #[ #( #? #_ #_( #: #! #=
               (?# . ".\\(?:#\\{1,3\\}\\|_(?\\|[{[(?:=!]\\)")

               ;; ;;
               (?\; . ".;")

               ;; __ _|_
               (?_ . ".|?_")

               ;; ~~ ~~> ~> ~= ~- ~@
               (?~ . ".\\(?:~>\\|[>@=~-]\\)")

               ;; $>
               (?$ . ".>")

               ;; ^=
               (?^ . ".=")

               ;; ]#
               (?\] . ".#")
               )))
  (dolist (char-regexp alist)

    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+end_src
